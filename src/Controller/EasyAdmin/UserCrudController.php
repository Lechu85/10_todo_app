<?php

namespace App\Controller\EasyAdmin;

use App\Entity\User;
use Doctrine\ORM\QueryBuilder;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FieldCollection;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FilterCollection;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Config\Filters;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Dto\EntityDto;
use EasyCorp\Bundle\EasyAdminBundle\Dto\SearchDto;
use EasyCorp\Bundle\EasyAdminBundle\Field\AvatarField;
use EasyCorp\Bundle\EasyAdminBundle\Field\BooleanField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ChoiceField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateField;
use EasyCorp\Bundle\EasyAdminBundle\Field\EmailField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ImageField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;

class UserCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return User::class;
    }

	public function createIndexQueryBuilder(SearchDto $searchDto, EntityDto $entityDto, FieldCollection $fields, FilterCollection $filters): QueryBuilder
	{
		$queryBuilder =  parent::createIndexQueryBuilder($searchDto, $entityDto, $fields, $filters); // TODO: Change the autogenerated stub

		if ($this->isGranted('ROLE_ADMIN')) {
			return $queryBuilder;
		}

		return $queryBuilder
			->andWhere('entity.id = :id')
			->setParameter('id', $this->getUser()->getId());

	}

	public function configureFields(string $pageName): iterable
    {
        yield IdField::new('id')
				->onlyOnIndex();
		yield AvatarField::new('avatar')
			->formatValue(static function($value, ?User $user) { //info ?User dzięki temu nie wyrzuca błędu jak na dole ustawimy setEntityPermission() - przekazywany jest tutaj null zamiast User bo pozycja nie ma być wyświetlona.
				return $user?->getAvatarUrl(); //php 8 pozwala też na taki zapis :)
			})
			->hideOnForm();
		yield ImageField::new('avatar')
			->setBasePath('/uploads/avatars')
			->setUploadDir('public/uploads/avatars')
			->setUploadedFileNamePattern('[slug]-[timestamp].[extension]')
			->onlyOnForms();
		yield EmailField::new('email');
	    yield TextField::new('fullName')//nie ma pola fullName, ale jest wystarczająco bystry, żeby odnaleźć getera getFullName() w encji :)
	            ->hideOnForm();
	    yield TextField::new('name')//Przerobić na firstname i last name
	        ->onlyOnForms();
	    yield BooleanField::new('enabled');
	    yield DateField::new('createdAt');

	    $roles = ['ROLE_SUPERADMIN', 'ROLE_ADMIN', 'ROLE_MODERATOR', 'ROLE_USER'];
	    yield ChoiceField::new('roles')
	        ->setChoices(array_combine($roles, $roles))
	        ->allowMultipleChoices()
	        ->renderExpanded()
	        ->renderAsBadges();

    }

	//questions jak tutaj dorobić configureActions? configureCrud wystarczy?
	public function configureCrud(Crud $crud): Crud
	{
		return parent::configureCrud($crud)
			->setEntityPermission('ADMIN_USER_EDIT');

			//info nie jest to rola, a z systemu sevurity. poczytać o tym więcej.
			// jeżeli użyjemy tutaj ROLI, wtedy zwróci true albpo false dla wszystkich pozyji
	}

	public function configureFilters(Filters $filters): Filters
	{
		return parent::configureFilters($filters)
			->add('enabled');
	}


}
