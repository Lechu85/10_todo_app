<?php

namespace App\Controller\EasyAdmin;

use App\EasyAdmin\VotesField;
use App\Entity\Question;
use App\Entity\User;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\QueryBuilder;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Config\Filters;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\Field;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextareaField;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;

#[IsGranted("ROLE_MODERATOR")]
//info jak jest niżej zablokowany dostp do akcji Action::INDEX to jest to to samo co tutaj w atrybutach.
class QuestionCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return Question::class;
    }

    public function configureFields(string $pageName): iterable
    {
		yield IdField::new('id')
			->onlyOnIndex();
		yield Field::new('name');
		yield Field::new('slug')
			->hideOnIndex()
			->setFormTypeOption(
				'disabled',
				$pageName !== Crud::PAGE_NEW
			);
	    yield AssociationField::new('topic');
		yield TextareaField::new('question')
			->hideOnIndex()
			->setFormTypeOptions([
				'row_attr' => [
					'data-controller' => 'snarkdown',
				],
				'attr' => [
					'data-snarkdown-target' => 'input',
					'data-action' => 'snarkdown#render',
				],
			])
			->setHelp('Podgląd:');
	    yield AssociationField::new('askedBy')
		    ->autocomplete()
	        ->formatValue(static function($value, Question $question) { //value to wartośc pola, a $question to obiekt question obecny
				if (!$user = $question->getAskedBy()) { //sprawdza czy zmienna user istnieje i czy sa zwraca coś getAskedBy()
					return null;
				}

				return sprintf('%s&nbsp;(%s)', $user->getEmail(), $user->getQuestions()->count());

	        })
		    ->setQueryBuilder(function (QueryBuilder $queryBuilder) {//tutaj tylko modyfikiujemy queryBuildera więc nie potrzebujemy nic zwracać
				$queryBuilder->andWhere('entity.enabled = :enabled')
					->setParameter('enabled', 1);
		    });
	    yield VotesField::new('votes','Total Votes')
	        ->setTextAlign('right')
	        ->setPermission('ROLE_ADMIN'); //info ukryte dla innych niżsuper admin
		yield AssociationField::new('answers')//orphant removal trzeba dołożyć, żeby nie było pytań bez autora :)
			->autocomplete()
			//jak jest autoicomplete to 'choice_label nie działa'
			//->setFormTypeOption('choice_label', 'id')//tutaj wybieramy z które pole encji chcemy wybrać
			->setFormTypeOption('by_reference', false);//musi byc, żeby sięzapisało
	    yield Field::new('createAt')
	        ->hideOnForm();
		yield AssociationField::new('updatedBy')
			->onlyOnDetail();
    }

	public function configureCrud(Crud $crud): Crud
	{
		return parent::configureCrud($crud)
			->setDefaultSort([
				'askedBy.enabled' => 'DESC',
				'createdAt' => 'DESC',
			]); // TODO: Change the autogenerated stub
	}

	public function configureActions(Actions $actions): Actions
	{
		return parent::configureActions($actions)
			->setPermission(Action::INDEX, 'ROLE_MODERATOR')
			->setPermission(Action::DETAIL, 'ROLE_MODERATOR')
			->setPermission(Action::EDIT, 'ROLE_MODERATOR')
			->setPermission(Action::NEW, 'ROLE_ADMIN')
			->setPermission(Action::DELETE, 'ROLE_ADMIN')
			//info pola checkboxdo zaznaczenia na liscie
			->setPermission(Action::BATCH_DELETE, 'ROLE_ADMIN');
	}

	public function configureFilters(Filters $filters): Filters
	{
		return parent::configureFilters($filters)
			->add('topic')
			->add('createdAt')
			->add('votes')
			->add('name');
	}

	public function updateEntity(EntityManagerInterface $entityManager, $entityInstance): void
	{

		$user = $this->getUser();
		//info w systmie mamy jedną klase User. Jeżeli jesteśmy więc zalogowani to zmienna ta jest instancją klasy User :)
		//taki myk sprawdzający czy jesteśmy zalogowani (chyba), komunikat się nie pojawi raczej nigdy :p
		// pomaga to naszemu edytorowi dalej podpowiadać metody i właściwości
		if (!$user instanceof User) {
			throw new \LogicException('Currently looged user is not instance of User? :) ');
		}

		$entityInstance->setUpdatedBy($user);

		parent::updateEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
	}


}