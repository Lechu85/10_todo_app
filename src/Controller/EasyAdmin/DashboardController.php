<?php

namespace App\Controller\EasyAdmin;

use App\Entity\Answer;
use App\Entity\Blog;
use App\Entity\BlogCategory;
use App\Entity\Question;
use App\Entity\Topic;
use App\Entity\User;
use App\Repository\QuestionRepository;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Assets;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Config\Dashboard;
use EasyCorp\Bundle\EasyAdminBundle\Config\MenuItem;
use EasyCorp\Bundle\EasyAdminBundle\Config\UserMenu;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractDashboardController;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\UX\Chartjs\Builder\ChartBuilderInterface;
use Symfony\UX\Chartjs\Model\Chart;
use function PHPUnit\Framework\throwException;

class DashboardController extends AbstractDashboardController
{

	private QuestionRepository $questionRepository;

	public function __construct(QuestionRepository $questionRepository)
	{
		$this->questionRepository = $questionRepository;
	}

	//jest to normalna akcja - popropstu akcja index
	#[IsGranted('ROLE_MODERATOR')]
    #[Route('/admin', name: 'admin')]
    public function index(ChartBuilderInterface $chartBuilder = null): Response
    {

		assert(null !== $chartBuilder); //zabezpieczenie chapter 23 easyadmin

		$latestQuestions = $this->questionRepository
			->findLatest();
		$topVoted = $this->questionRepository
			->findTopVoted();

		return $this->render('easy_admin/index.html.twig', [
			'latestQuestions' => $latestQuestions,
			'topVoted' => $topVoted,
			'chart' => $this->createChart($chartBuilder),

		]);

    }

    public function configureDashboard(): Dashboard
    {
        return Dashboard::new()
	       // ->setTitle('<img src="assets/images/favicon/app_logo.png">  <span class="text-small">ToDo App :)</span>')
	        ->setTitle('ToDo App Admin :) ')
	        ->setFaviconPath('assets/images/favicon/favicon.ico')
	        ;
    }

	public function configureUserMenu(UserInterface $user): UserMenu
	{
		if (!$user instanceof User) {
			throw new \Exception('wrong user');
			//to się nie wydarzy, ale dzieki temu widzi klase getAvatarUrl poniżej
		}

		return parent::configureUserMenu($user)
			->setAvatarUrl($user->getAvatarUrl())//nie wyswioetla avatarta, tyzeba załądować
			->setMenuItems([
				MenuItem::linkToUrl('Profile', 'fa fa-user', $this->generateUrl('app_profile')),
				MenuItem::linkToUrl('Log out', 'fa fa-sign-out', $this->generateUrl('app_logout')),
			])
			;

	}

	public function configureMenuItems(): iterable
    {

		yield MenuItem::linkToDashboard('Dashboard', 'fa fa-home');
		yield MenuItem::section('Content');
		yield MenuItem::subMenu('Questions', 'fa fa-question-circle')
			->setSubItems([
				MenuItem::linkToCrud('All', 'fa fa-list', Question::class)
					->setPermission('ROLE_MODERATOR')
					->setController(QuestionCrudController::class),
			    MenuItem::linkToCrud('Pending Aproval', 'far fa-warning', Question::class)
				    ->setPermission('ROLE_MODERATOR')
			        ->setController(QuestionPendingApprovalCrudController::class),
		]);
	    yield MenuItem::linkToCrud('Answers', 'fa fa-comments', Answer::class);
	    yield MenuItem::linkToCrud('Topics', 'fa fa-folder', Topic::class);
	    yield MenuItem::linkToCrud('Users', 'fa fa-users', User::class);
	    yield MenuItem::section();
		yield MenuItem::linkToRoute('Homepage', 'fa fa-home', 'home_index');
	    yield MenuItem::linkToUrl('Homepage', 'fa fa-home', $this->generateUrl('home_index'));
		yield MenuItem::linkToUrl('StackOverflow', 'fab fa-stack-overflow', 'https://stackoverflow.com')
			->setLinkTarget('_blank');
    }

	public function configureCrud(): Crud
	{
		return parent::configureCrud()
			->setDefaultSort([
				'id' => 'DESC',
			])
			->overrideTemplate('crud/field/id', 'easy_admin/field/id_with_icon.html.twig'); // TODO: Change the autogenerated stub
	}


	public function configureActions(): Actions
	{
		return parent::configureActions()
			//info For the Crud::PAGE_INDEX page, please add the Action::DETAIL.
			->add(Crud::PAGE_INDEX, Action::DETAIL)
			//info dodajemy ikonke do wszystichy przyciskó edit
			->update(Crud::PAGE_DETAIL, Action::EDIT, static function (Action $action) {
				return $action->setIcon('fa fa-edit');
			})
			//info dodajemy ikonke do wszystkich przyciskó pokaż liste
			->update(Crud::PAGE_DETAIL, Action::INDEX, static function (Action $action) {
				return $action->setIcon('fa fa-list');
			});
		}

	public function configureAssets(): Assets
	{
		return parent::configureAssets()
			->addWebpackEncoreEntry('admin'); // TODO: Change the autogenerated stub
	}

	public function createChart($chartBuilder): Chart
	{
		$chart = $chartBuilder->createChart(Chart::TYPE_LINE);

		$chart->setData([
			'labels' => ['January', 'February', 'March', 'April', 'May', 'June', 'July'],
			'datasets' => [
				[
					'label' => 'My First dataset',
					'backgroundColor' => 'rgb(255, 99, 132)',
					'borderColor' => 'rgb(255, 99, 132)',
					'data' => [0, 10, 5, 2, 20, 30, 45],
				],
			],
		]);

		$chart->setOptions([
			'scales' => [
				'y' => [
					'suggestedMin' => 0,
					'suggestedMax' => 100,
				],
			],
		]);

		return $chart;
	}

}
